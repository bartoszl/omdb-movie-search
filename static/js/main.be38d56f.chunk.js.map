{"version":3,"sources":["assets/movie-background.jpg","components/SearchContainer.js","constants/colors.js","components/Input/Input.js","components/Button/Button.js","hooks/useFilters.js","components/SearchFormWrapper.js","components/SearchForm.js","components/Movie.js","components/MovieContainer.js","components/Logo.js","components/Layout/Layout.js","api/movies.js","actions/movies.js","reducers/movies.js","selectors/movies.js","pages/IndexPage/index.js","App.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["module","exports","SearchContainer","styled","div","collapsed","Input","input","Button","button","useFilters","useLocation","search","pathname","history","useHistory","filters","useMemo","qs","parse","slice","applyFilters","newFilters","push","stringify","SearchFormWrapper","form","SearchForm","defaultValues","useForm","register","handleSubmit","handleSearchSubmit","values","a","err","console","log","onSubmit","data-testid","type","ref","name","placeholder","icon","faSearch","color","defaultProps","MovieContainer","MoviePoster","img","Title","h4","Year","h5","Movie","imgSrc","title","year","src","alt","movieBackground","LogoContainer","Logo","faFilm","size","Layout","children","s","getMovies","params","axios","get","apikey","data","wait","time","Promise","resolve","setTimeout","createAsyncThunk","rejectWithValue","api","Response","Error","records","Search","initialState","isLoading","reducer","createReducer","builder","addCase","pending","state","fulfilled","action","payload","rejected","error","getMoviesState","movies","getMovieList","getIsLoadingFlag","loaderCss","css","IndexPage","dispatch","useDispatch","useSelector","useEffect","loading","map","Poster","App","path","component","combineReducers","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.be38d56f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie-background.7c4c06c1.jpg\";","import styled from 'styled-components';\nimport { BACKGROUND_GREY } from '../constants/colors';\n\nconst SearchContainer = styled.div`\n  width: 100vw;\n  height: ${({ collapsed }) => (collapsed ? '15vh' : '100vh')};\n  background-color: ${BACKGROUND_GREY};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: height 0.75s ease-out;\n  position: fixed;\n  top: 0;\n  left: 0;\n`;\n\nexport default SearchContainer;\n","export const SHADOW = '#aaa';\nexport const BACKGROUND_GREY = '#111';\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  padding: 0.5rem 0.25rem;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n  border: none;\n  width: 16rem;\n`;\n\nexport default Input;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  padding: 0.5rem 0.75rem;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n  border: none;\n  background-color: #0b3849;\n  cursor: pointer;\n`;\n\nexport default Button;\n","import { useMemo } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport qs from 'qs';\n\nconst useFilters = () => {\n  const { search, pathname } = useLocation();\n  const history = useHistory();\n\n  const filters = useMemo(() => qs.parse(search.slice(1)), [search]);\n\n  const applyFilters = (newFilters) => {\n    history.push(`${pathname}?${qs.stringify({\n      ...filters,\n      ...newFilters,\n    })}`);\n  };\n\n  return {\n    applyFilters,\n    filters,\n  };\n};\n\nexport default useFilters;\n","import styled from 'styled-components';\nimport { SHADOW } from '../constants/colors';\n\nconst SearchFormWrapper = styled.form`\n  box-shadow: 0 0 5px 1px ${SHADOW};\n  border-radius: 3px;\n`;\n\nexport default SearchFormWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport useFilters from '../hooks/useFilters';\nimport Input from './Input';\nimport Button from './Button';\nimport SearchFormWrapper from './SearchFormWrapper';\n\nconst SearchForm = ({ defaultValues }) => {\n  const {\n    register, handleSubmit,\n  } = useForm({\n    defaultValues,\n  });\n\n  const { applyFilters } = useFilters();\n\n  const handleSearchSubmit = async (values) => {\n    try {\n      applyFilters(values);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <SearchFormWrapper onSubmit={handleSubmit(handleSearchSubmit)} data-testid=\"search-form\">\n      <Input\n        type=\"text\"\n        ref={register}\n        name=\"s\"\n        placeholder=\"Search...\"\n      />\n      <Button type=\"submit\">\n        <FontAwesomeIcon icon={faSearch} color=\"white\" />\n      </Button>\n    </SearchFormWrapper>\n  );\n};\n\nSearchForm.propTypes = {\n  defaultValues: PropTypes.shape({\n    s: PropTypes.string,\n  }),\n};\n\nSearchForm.defaultProps = {\n  defaultValues: {},\n};\n\nexport default SearchForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { SHADOW, BACKGROUND_GREY } from '../constants/colors';\n\nconst MovieContainer = styled.div`\n  margin: 4px 8px 16px 8px;\n  width: 248px;\n  padding: 4px;\n  border-radius: 3px;\n  background-color: ${BACKGROUND_GREY};\n  color: white;\n  box-shadow: 0 0 5px 1px ${SHADOW};\n  transition: all 0.25s;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0 0 7px 2px ${SHADOW};\n    padding: 8px;\n    margin: 0px 4px 12px 4px;\n  }\n`;\n\nconst MoviePoster = styled.img`\n  width: 100%;\n  height: auto;\n`;\n\nconst Title = styled.h4`\n  margin-top: 0.75rem;\n  margin-bottom: 0.25rem;\n`;\n\nconst Year = styled.h5`\n  margin-top: 0.25rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst Movie = ({ imgSrc, title, year }) => (\n  <MovieContainer>\n    <MoviePoster src={imgSrc} alt={title} />\n    <Title>\n      { title }\n    </Title>\n    <Year>\n      { year }\n    </Year>\n  </MovieContainer>\n);\n\nMovie.propTypes = {\n  imgSrc: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n};\n\nexport default Movie;\n","import styled from 'styled-components';\nimport movieBackground from '../assets/movie-background.jpg';\n\nconst MovieContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  background-image: url(${movieBackground});\n  background-attachment: fixed;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding: 20vh 0px;\n  width: 100vw;\n  min-height: 100vh;\n`;\n\nexport default MovieContainer;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFilm } from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\n\nconst LogoContainer = styled.div`\n  position: fixed;\n  left: 2rem;\n  top: 1.5rem;\n`;\n\nconst Logo = () => (\n  <LogoContainer>\n    <FontAwesomeIcon icon={faFilm} size=\"4x\" color=\"white\" />\n  </LogoContainer>\n);\n\nexport default Logo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useFilters from '../../hooks/useFilters';\nimport SearchContainer from '../SearchContainer';\nimport SearchForm from '../SearchForm';\nimport Logo from '../Logo';\n\nconst Layout = ({ children }) => {\n  const { filters } = useFilters();\n  const { s } = filters;\n\n  return (\n    <>\n      <SearchContainer collapsed={s}>\n        <Logo />\n        <SearchForm defaultValues={filters} />\n      </SearchContainer>\n      { children }\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import axios from 'axios';\n\nconst DEFAULT_URL = 'http://www.omdbapi.com/';\nconst API_KEY = '157f34ed';\n// const IMDB_ID = 'tt3896198';\n\nexport const getMovies = async (params) => {\n  const { data } = await axios.get(DEFAULT_URL, {\n    params: {\n      apikey: API_KEY,\n      ...params,\n    },\n  });\n\n  return data;\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as api from '../api/movies';\n\nconst wait = (time) => new Promise((resolve) => setTimeout(resolve, time));\n\nexport const getMovies = createAsyncThunk(\n  'GET_MOVIE_LIST',\n  async (params, { rejectWithValue }) => {\n    const data = await api.getMovies(params);\n\n    await wait(3000);\n\n    if (data.Response === 'False') {\n      return rejectWithValue(data.Error);\n    }\n\n    return {\n      records: data.Search,\n    };\n  },\n);\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  getMovies,\n} from '../actions/movies';\n\nexport const initialState = {\n  isLoading: false,\n  records: [],\n};\n\nconst reducer = createReducer(initialState, (builder) => builder\n  .addCase(getMovies.pending, (state) => ({\n    ...state,\n    isLoading: true,\n    records: [],\n  }))\n  .addCase(getMovies.fulfilled, (state, action) => ({\n    ...state,\n    records: action.payload.records,\n    isLoading: false,\n  }))\n  .addCase(getMovies.rejected, (state, action) => ({\n    ...state,\n    isLoading: false,\n    records: [],\n    error: action.payload,\n  })));\n\nexport default reducer;\n","import { initialState } from '../reducers/movies';\n\nexport const getMoviesState = (\n  state,\n) => state.movies || initialState;\n\nexport const getMovieList = (\n  state,\n) => getMoviesState(state).records;\n\nexport const getIsLoadingFlag = (\n  state,\n) => getMoviesState(state).isLoading;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport { css } from '@emotion/core';\nimport useFilters from '../../hooks/useFilters';\nimport {\n  SearchContainer, SearchForm, Movie, MovieContainer, Logo,\n} from '../../components';\nimport { getMovies } from '../../actions/movies';\nimport { getMovieList, getIsLoadingFlag } from '../../selectors/movies';\n\nconst loaderCss = css`\n  margin-top: 150px;\n`;\n\nconst IndexPage = () => {\n  const { filters } = useFilters();\n  const { s } = filters;\n  const dispatch = useDispatch();\n  const movies = useSelector(getMovieList);\n  const isLoading = useSelector(getIsLoadingFlag);\n\n  useEffect(() => {\n    if (s) {\n      dispatch(getMovies(filters));\n    }\n  }, [filters]);\n\n  return (\n    <MovieContainer>\n      <BeatLoader color=\"white\" size={50} loading={isLoading} css={loaderCss} />\n\n      { movies.map(({ Poster, Title, Year }) => (\n        <Movie imgSrc={Poster} title={Title} year={Year} />\n      ))}\n    </MovieContainer>\n  );\n};\n\nexport default IndexPage;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Layout } from './components';\nimport { IndexPage } from './pages';\n\nconst App = () => (\n  <BrowserRouter>\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={IndexPage} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport movies from './movies';\n\nexport default combineReducers({\n  movies,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nexport default createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createGlobalStyle } from 'styled-components';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@200;400;600&display=swap');\n\n  body {\n    margin: 0;\n    padding: 0;\n  }\n\n  * {\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 400;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}